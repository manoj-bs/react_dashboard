{"version":3,"sources":["auth/hooks/useUpdatePassword.ts","admin/pages/ProfilePassword.tsx"],"names":["updatePassword","a","oldPassword","newPassword","axios","put","data","ProfilePassword","snackbar","useSnackbar","t","useTranslation","useMutation","isUpdating","isLoading","mutateAsync","useUpdatePassword","formik","useFormik","initialValues","confirmPassword","validationSchema","Yup","min","size","required","oneOf","onSubmit","values","handleUpdatePassword","then","resetForm","success","catch","error","handleSubmit","noValidate","Card","CardHeader","title","CardContent","TextField","margin","fullWidth","name","label","type","id","autoComplete","disabled","value","onChange","handleChange","touched","Boolean","errors","helperText","CardActions","LoadingButton","loading","variant"],"mappings":"oRAGMA,EAAc,uCAAG,mCAAAC,EAAA,sDAEV,OADXC,EAAW,EAAXA,YACAC,EAAW,EAAXA,YAAW,SAKYC,IAAMC,IAAI,gBAAiB,CAChDH,cACAC,gBACC,KAAD,EAHU,OAGV,SAHMG,EAAI,EAAJA,KAAI,kBAILA,GAAI,2CACZ,gBAZmB,sC,oBCsHLC,UA7GS,WACtB,IAAMC,EAAWC,cACTC,EAAMC,cAAND,EAER,EDCK,WACL,MAAmCE,YAAYZ,GAC/C,MAAO,CAAEa,WADQ,EAATC,UACwBd,eADF,EAAXe,aCFoBC,GAA/BH,EAAU,EAAVA,WAAYb,EAAc,EAAdA,eAEdiB,EAASC,YAAU,CACvBC,cAAe,CACbjB,YAAa,GACbC,YAAa,GACbiB,gBAAiB,IAEnBC,iBAAkBC,IAAW,CAC3BpB,YAAaoB,MACVC,IAAI,EAAGb,EAAE,yBAA0B,CAAEc,KAAM,KAC3CC,SAASf,EAAE,gCACdP,YAAamB,MACVC,IAAI,EAAGb,EAAE,yBAA0B,CAAEc,KAAM,KAC3CC,SAASf,EAAE,gCACdU,gBAAiBE,MACdI,MAAM,CAACJ,IAAQ,gBAAiBZ,EAAE,qCAClCe,SAASf,EAAE,kCAEhBiB,SAAU,SAACC,GAAM,OACfC,EAAqBD,EAAO1B,YAAa0B,EAAOzB,gBAG9C0B,EAAoB,uCAAG,WAC3B3B,EACAC,GAAmB,iEAEnBH,EAAe,CAAEE,cAAaC,gBAC3B2B,MAAK,WACJb,EAAOc,YACPvB,EAASwB,QAAQtB,EAAE,6CAEpBuB,OAAM,WACLzB,EAAS0B,MAAMxB,EAAE,yCAChB,2CACN,gBAZyB,wCAc1B,OACE,sBAAMiB,SAAUV,EAAOkB,aAAcC,YAAU,WAC7C,eAACC,EAAA,EAAI,WACH,cAACC,EAAA,EAAU,CAACC,MAAO7B,EAAE,4BACrB,eAAC8B,EAAA,EAAW,WACV,cAACC,EAAA,EAAS,CACRC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACTC,KAAK,cACLC,MAAOnC,EAAE,uCACToC,KAAK,WACLC,GAAG,cACHC,aAAa,mBACbC,SAAUpC,EACVqC,MAAOjC,EAAOW,OAAO1B,YACrBiD,SAAUlC,EAAOmC,aACjBlB,MACEjB,EAAOoC,QAAQnD,aAAeoD,QAAQrC,EAAOsC,OAAOrD,aAEtDsD,WAAYvC,EAAOoC,QAAQnD,aAAee,EAAOsC,OAAOrD,cAE1D,cAACuC,EAAA,EAAS,CACRC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACTC,KAAK,cACLC,MAAOnC,EAAE,mCACToC,KAAK,WACLC,GAAG,cACHE,SAAUpC,EACVqC,MAAOjC,EAAOW,OAAOzB,YACrBgD,SAAUlC,EAAOmC,aACjBlB,MACEjB,EAAOoC,QAAQlD,aAAemD,QAAQrC,EAAOsC,OAAOpD,aAEtDqD,WAAYvC,EAAOoC,QAAQlD,aAAec,EAAOsC,OAAOpD,cAE1D,cAACsC,EAAA,EAAS,CACRC,OAAO,SACPjB,UAAQ,EACRkB,WAAS,EACTC,KAAK,kBACLC,MAAOnC,EAAE,uCACToC,KAAK,WACLC,GAAG,kBACHE,SAAUpC,EACVqC,MAAOjC,EAAOW,OAAOR,gBACrB+B,SAAUlC,EAAOmC,aACjBlB,MACEjB,EAAOoC,QAAQjC,iBACfkC,QAAQrC,EAAOsC,OAAOnC,iBAExBoC,WACEvC,EAAOoC,QAAQjC,iBAAmBH,EAAOsC,OAAOnC,qBAItD,cAACqC,EAAA,EAAW,UACV,cAACC,EAAA,EAAa,CAACZ,KAAK,SAASa,QAAS9C,EAAY+C,QAAQ,YAAW,SAClElD,EAAE","file":"static/js/31.1951a3b3.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useMutation } from \"react-query\";\n\nconst updatePassword = async ({\n  oldPassword,\n  newPassword,\n}: {\n  oldPassword: string;\n  newPassword: string;\n}) => {\n  const { data } = await axios.put(\"/api/password\", {\n    oldPassword,\n    newPassword,\n  });\n  return data;\n};\n\nexport function useUpdatePassword() {\n  const { isLoading, mutateAsync } = useMutation(updatePassword);\n  return { isUpdating: isLoading, updatePassword: mutateAsync };\n}\n","import Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport TextField from \"@material-ui/core/TextField\";\nimport LoadingButton from \"@material-ui/lab/LoadingButton\";\nimport { useFormik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Yup from \"yup\";\nimport { useUpdatePassword } from \"../../auth/hooks/useUpdatePassword\";\nimport { useSnackbar } from \"../../core/contexts/SnackbarProvider\";\n\nconst ProfilePassword = () => {\n  const snackbar = useSnackbar();\n  const { t } = useTranslation();\n\n  const { isUpdating, updatePassword } = useUpdatePassword();\n\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n    validationSchema: Yup.object({\n      oldPassword: Yup.string()\n        .min(8, t(\"common.validations.min\", { size: 8 }))\n        .required(t(\"common.validations.required\")),\n      newPassword: Yup.string()\n        .min(8, t(\"common.validations.min\", { size: 8 }))\n        .required(t(\"common.validations.required\")),\n      confirmPassword: Yup.string()\n        .oneOf([Yup.ref(\"newPassword\")], t(\"common.validations.passwordMatch\"))\n        .required(t(\"common.validations.required\")),\n    }),\n    onSubmit: (values) =>\n      handleUpdatePassword(values.oldPassword, values.newPassword),\n  });\n\n  const handleUpdatePassword = async (\n    oldPassword: string,\n    newPassword: string\n  ) => {\n    updatePassword({ oldPassword, newPassword })\n      .then(() => {\n        formik.resetForm();\n        snackbar.success(t(\"profile.notifications.passwordChanged\"));\n      })\n      .catch(() => {\n        snackbar.error(t(\"common.errors.unexpected.subTitle\"));\n      });\n  };\n\n  return (\n    <form onSubmit={formik.handleSubmit} noValidate>\n      <Card>\n        <CardHeader title={t(\"profile.password.title\")} />\n        <CardContent>\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"oldPassword\"\n            label={t(\"profile.password.form.current.label\")}\n            type=\"password\"\n            id=\"oldPassword\"\n            autoComplete=\"current-password\"\n            disabled={isUpdating}\n            value={formik.values.oldPassword}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.oldPassword && Boolean(formik.errors.oldPassword)\n            }\n            helperText={formik.touched.oldPassword && formik.errors.oldPassword}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"newPassword\"\n            label={t(\"profile.password.form.new.label\")}\n            type=\"password\"\n            id=\"newPassword\"\n            disabled={isUpdating}\n            value={formik.values.newPassword}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.newPassword && Boolean(formik.errors.newPassword)\n            }\n            helperText={formik.touched.newPassword && formik.errors.newPassword}\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"confirmPassword\"\n            label={t(\"profile.password.form.confirm.label\")}\n            type=\"password\"\n            id=\"confirmPassword\"\n            disabled={isUpdating}\n            value={formik.values.confirmPassword}\n            onChange={formik.handleChange}\n            error={\n              formik.touched.confirmPassword &&\n              Boolean(formik.errors.confirmPassword)\n            }\n            helperText={\n              formik.touched.confirmPassword && formik.errors.confirmPassword\n            }\n          />\n        </CardContent>\n        <CardActions>\n          <LoadingButton type=\"submit\" loading={isUpdating} variant=\"contained\">\n            {t(\"common.update\")}\n          </LoadingButton>\n        </CardActions>\n      </Card>\n    </form>\n  );\n};\n\nexport default ProfilePassword;\n"],"sourceRoot":""}